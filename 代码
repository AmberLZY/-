#垃圾邮件数据集来自机器学习老师的群分享
#训练集：垃圾邮件20，非垃圾邮件20
#测试集：共10，其中5封垃圾邮件，5封非垃圾邮件
#测试结果：4封垃圾邮件，6封非垃圾邮件，分错一封
import os

def readtxt(path,code):
    with open(path, 'r', encoding = code) as f:
        lines = f.readlines()
    return lines

def fileWalker(path):
    fileArray = []
    for root, dirs, files in os.walk(path):
        for fn in files:
            eachpath = str(root+'\\'+fn)
            fileArray.append(eachpath)
    return fileArray

def email_parser(email_path): # 分离出所有的词
    punctuations = """,.<>()*&^%$#@!'";~`[]{}|、\\/~+_-=?"""
    content_list = readtxt(email_path, 'gbk')
    content = (' '.join(content_list)).replace('\r\n', ' ').replace('\t', ' ')
    clean_word = []
    for punctuation in punctuations:
        content = (' '.join(content.split(punctuation))).replace('  ', ' ')
        clean_word = [word.lower()
                      for word in content.split(' ') if len(word) > 2]
    return clean_word


def get_word(email_file):
    word_list = []
    word_set = []
    email_paths = fileWalker(email_file)
    for email_path in email_paths:
        clean_word = email_parser(email_path)
        word_list.append(clean_word)
        word_set.extend(clean_word)
    return word_list, set(word_set)


def count_word_prob(email_list, union_set):
    word_prob = {} # 字典用于统计所有词的词频，若词未出现则词频记为0.01
    for word in union_set:
        counter = 0 # 记数某一个词在所有邮件中出现的次数
        for email in email_list:
            if word in email:
                counter += 1
            else:
                continue
        prob = 0.0
        if counter != 0:
            prob = counter/len(email_list)
        else:
            prob = 0.01
        word_prob[word] = prob
    return word_prob


def filter(ham_word_pro, spam_word_pro, test_file):
    test_paths = fileWalker(test_file)
    for test_path in test_paths:
        email_spam_prob = 0.0
        spam_prob = 0.5 # 先验概率都是0.5
        ham_prob = 0.5
        file_name = test_path.split('\\')[-1]
        prob_dict = {}
        words = set(email_parser(test_path)) # set() 函数创建一个无序不重复元素集，在这里用于创建一封邮件的所有单词的集合
        for word in words:
            Psw = 0.0
            if word not in spam_word_pro:
                Psw = 0.4 # 第一次出现的词的Psw预设为0.4
            else:
                Pws = spam_word_pro[word] # 该词在垃圾邮件中的概率
                Pwh = ham_word_pro[word] # 该词在非垃圾邮件中的概率
                Psw = spam_prob*(Pws/(Pwh*ham_prob+Pws*spam_prob)) # 有该词的邮件是垃圾邮件的概率
            prob_dict[word] = Psw # 把改词的Psw加入字典
        spamnum = 1
        hamnum = 1
        for key, value in prob_dict.items():
            spamnum *= value
            hamnum *= (1-value)
        email_spam_prob = round(spamnum/(spamnum+hamnum), 4) # round返回浮点数的四舍五入值，这里保留小数点后四位
        if email_spam_prob > 0.5:
            print(file_name, 'spam', email_spam_prob)
        else:
            print(file_name, 'ham', email_spam_prob)


def main():
    ham_file = r'F:\PyCodeProjects\PythonProjects\spammailset\ham'
    spam_file = r'F:\PyCodeProjects\PythonProjects\spammailset\spam'
    test_file = r'F:\PyCodeProjects\PythonProjects\spammailset\test'
    ham_list, ham_set = get_word(ham_file)
    spam_list, spam_set = get_word(spam_file)
    union_set = ham_set | spam_set
    ham_word_pro = count_word_prob(ham_list, union_set)
    spam_word_pro = count_word_prob(spam_list, union_set)
    filter(ham_word_pro, spam_word_pro, test_file)


if __name__ == '__main__':
    main()
